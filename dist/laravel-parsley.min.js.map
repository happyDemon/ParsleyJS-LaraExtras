{"version":3,"sources":["/source/laravel-parsley.js","/source/src/rules/ins.js","/source/src/rules/dates.js","/source/src/utils.js","/source/src/rules/comparison.js","/source/src/rules/requireds.js","/source/src/main.js"],"names":["global","factory","exports","module","require","define","amd","laraParsley","jQuery","moment","this","window","Parsley","addValidator","requirementType","validateString","value","parameter","possibles","split","indexOf","messages","en","options","dateFormats","state","parsleyInstance","formatDatePhpToJs","getDateFormatsOption","isValid","convert","beforeDate","beforeInput","length","beforeVal","val","console","warn","thisDate","afterDate","afterInput","log","afterVal","mapChars","d","D","j","l","N","S","format","replace","w","z","W","F","m","M","n","t","daysInMonth","L","isLeapYear","o","Y","y","a","A","B","thisUTC","clone","utc","swatch","hours","minutes","seconds","Math","floor","g","G","h","H","i","s","u","e","I","isDST","O","P","T","Z","parseInt","c","r","U","formatEx","PHPDateFormat","phpStr","call","parent","utils","parseArrayStringParameter","match","bindChangeToOtherElement","rule","element","fieldInstance","originalNotEmpty","$elem","elData","data","undefined","push","on","$element","get","validate","validateNumber","min","max","validateMultiple","values","storedValues","isDistinct","forEach","otherFieldName","substring","each","parameters","field","slice","fieldValue","allElements","AnyPresent","id","AllPresent","AllEmpty","ParsleyExtend","_isRequired","requiredRules","requiredRulesFound","constraintsByName","required","requirements","main"],"mappings":"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","file":"laravel-parsley.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('moment')) :\n    typeof define === 'function' && define.amd ? define(['jquery', 'moment'], factory) :\n    global.laraParsley = factory(global.jQuery, global.moment)\n}(this, function (jQuery, moment) { 'use strict';\n\n    // Check if the value is within a comma-separated list (val1,val2,..)\n    window.Parsley\n        .addValidator('in', {\n            requirementType: 'string',\n            validateString: function (value, parameter) {\n                var possibles = parameter.split(',');\n\n                return possibles.indexOf(value) > -1;\n            },\n            messages: {\n                en: 'The value should be one of the following: \"%s\".'\n            }\n        });\n\n    // Check if the value is not in a comma-separated list (val1,val2,..)\n    window.Parsley\n        .addValidator('notIn', {\n            requirementType: 'string',\n            validateString: function (value, parameter) {\n                var possibles = parameter.split(',');\n\n                return possibles.indexOf(value) == -1;\n            },\n            messages: {\n                en: 'The value should not be one of the following: \"%s\".'\n            }\n        });\n\n    // Valid date formats\n    window.Parsley.options.dateFormats = ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD'];\n\n    // Check if the value is a date\n    window.Parsley\n        .addValidator('date', {\n            requirementType: 'boolean',\n            validateString: function (value, state, parsleyInstance) {\n                return moment(value, formatDatePhpToJs.getDateFormatsOption(parsleyInstance), true).isValid();\n            },\n            messages: {\n                en: 'You should provide a valid date.'\n            }\n        });\n\n\n    // Check if the value is a date in a specific format\n    window.Parsley\n        .addValidator('dateFormat', {\n            requirementType: 'string',\n            validateString: function (value, parameter) {\n                return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n            },\n            messages: {\n                en: 'The date you entered is not in the right format (%s).'\n            }\n        });\n\n\n    // Check if the value is a date before the specified date\n    window.Parsley\n        .addValidator('before', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n\n                var beforeDate = moment(parameter, dateFormats, true);\n\n                // If it's not a valid date, error\n                if (beforeDate === false)\n                    return false;\n\n                return moment(value, dateFormats) < beforeDate;\n            },\n            messages: {\n                en: 'The date you entered should be before %s.'\n            }\n        });\n\n    // Check if the value is a date before the specified date (from another input)\n    window.Parsley\n        .addValidator('beforeInput', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n                var beforeInput = jQuery(parameter);\n\n                // If we can't find the input, return true\n                if (beforeInput.length == 0)\n                    return true;\n\n                var beforeVal = beforeInput.val();\n\n                // If the val is empty, return true\n                if (beforeVal == '')\n                    return true;\n\n                var beforeDate = moment(beforeVal, dateFormats, true);\n\n                // If the before date isn't valid, error out\n                if (beforeDate.isValid() === false) {\n                    console.warn(parameter + ' input does not contain a valid date');\n                    return false;\n                }\n\n                var thisDate = moment(value, dateFormats, true);\n\n                // If the value's date isn't valid, error out\n                if (thisDate.isValid() === false) {\n                    console.warn('the input being checked does not contain a valid date');\n                    return false;\n                }\n\n                return thisDate < beforeDate;\n            },\n            messages: {\n                en: 'The date you entered should be before %s.'\n            }\n        });\n\n\n    // Check if the value is a date before the specified date\n    window.Parsley\n        .addValidator('after', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n                var afterDate = moment(parameter, dateFormats, true);\n\n                // If it's not a valid date, error\n                if (afterDate === false)\n                    return false;\n\n                return moment(value, dateFormats) > afterDate;\n            },\n            messages: {\n                en: 'The date you entered should be after %s.'\n            }\n        });\n\n    // Check if the value is a date before the specified date (from another input)\n    window.Parsley\n        .addValidator('afterInput', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n                var afterInput = jQuery(parameter);\n\n                console.log(this, dateFormats);\n\n                // If we can't find the input, return true\n                if (afterInput.length == 0)\n                    return true;\n\n                var afterVal = afterInput.val();\n\n                // If the val is empty, return true\n                if (afterVal == '')\n                    return true;\n\n                var afterDate = moment(afterVal, dateFormats, true);\n\n                // If the after date isn't valid, error out\n                if (afterDate.isValid() === false) {\n                    console.warn(parameter + ' input does not contain a valid date');\n                    return false;\n                }\n\n                var thisDate = moment(value, dateFormats, true);\n\n                // If the value's date isn't valid, error out\n                if (thisDate.isValid() === false) {\n                    console.warn('the input being checked does not contain a valid date');\n                    return false;\n                }\n\n                return thisDate > afterDate;\n            },\n            messages: {\n                en: 'The date you entered should be after %s.'\n            }\n        });\n\n    // convert PHP date format to moment JS date format\n    var formatDatePhpToJs = {\n        mapChars: {\n            d: 'DD',\n            D: 'ddd',\n            j: 'D',\n            l: 'dddd',\n            N: 'E',\n            S: function () {\n                return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n            },\n            w: 'd',\n            z: function () {\n                return this.format('DDD', true) - 1;\n            },\n            W: 'W',\n            F: 'MMMM',\n            m: 'MM',\n            M: 'MMM',\n            n: 'M',\n            t: function () {\n                return this.daysInMonth();\n            },\n            L: function () {\n                return this.isLeapYear() ? 1 : 0;\n            },\n            o: 'GGGG',\n            Y: 'YYYY',\n            y: 'YY',\n            a: 'a',\n            A: 'A',\n            B: function () {\n                var thisUTC = this.clone().utc(),\n                // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                    swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n                return Math.floor(swatch * 1000 / 24);\n            },\n            g: 'h',\n            G: 'H',\n            h: 'hh',\n            H: 'HH',\n            i: 'mm',\n            s: 'ss',\n            u: '[u]', // not sure if moment has this\n            e: '[e]', // moment does not have this\n            I: function () {\n                return this.isDST() ? 1 : 0;\n            },\n            O: 'ZZ',\n            P: 'Z',\n            T: '[T]', // deprecated in moment\n            Z: function () {\n                return parseInt(this.format('ZZ', true), 10) * 36;\n            },\n            c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n            r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n            U: 'X'\n        },\n        formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n        convert: function (PHPDateFormat) {\n            return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n                console.log(formatDatePhpToJs.mapChars[phpStr]);\n                return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n            })\n        },\n        getDateFormatsOption: function (parsleyInstance) {\n            if (typeof parsleyInstance.options.dateFormats == 'undefined') {\n                return this.getDateFormatsOption(parsleyInstance.parent);\n            }\n\n            return parsleyInstance.options.dateFormats;\n        }\n    }\n\n    /**\n     * Helper functions.\n     *\n     * @type {{parseArrayStringParameter: larapars.parseArrayStringParameter, bindChangeToOtherElement: larapars.bindChangeToOtherElement, getDateFormatsOption: larapars.getDateFormatsOption}}\n     */\n    var utils = {\n        parseArrayStringParameter: function (parameter) {\n            var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n            if (!m)\n                throw 'Requirement is not an array: \"' + parameter + '\"';\n\n            return m[1].replace(/\\'+/g, '').split(',');\n        },\n        /**\n         * This is used by various validation rules that rely on another input for validation.\n         *\n         * This function adds a 'change' event listener which forces the original to be validated again.\n         *\n         * @param rule              Name of the rule this change handler is for\n         * @param element           Which element to bind this to\n         * @param fieldInstance     The ParsleyFieldInstance we can call validate() on\n         * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n         */\n        bindChangeToOtherElement: function (rule, element, fieldInstance, originalNotEmpty) {\n            var $elem = jQuery(element);\n            var elData = $elem.data('larapars-rules');\n\n            // None were added yet, initialise\n            if (elData === undefined) {\n                elData = [rule];\n                $elem.data('larapars-rules', elData);\n            }\n            // Initialised, but not present\n            else if (elData.indexOf(rule) == -1) {\n                elData.push(rule);\n                $elem.data('larapars-rules', elData);\n            }\n            // Already bound\n            else {\n                return;\n            }\n\n            // If not yet bound\n            $elem.on('change', function () {\n                if (originalNotEmpty === true && jQuery(fieldInstance.$element.get(0)).val() != '') {\n                    fieldInstance.validate();\n                }\n                else if (originalNotEmpty !== true) {\n                    fieldInstance.validate();\n                }\n            });\n        }\n    };\n\n    // Check if the value is different from the specified input's value\n    window.Parsley\n        .addValidator('different', {\n            requirementType: 'string',\n            validateString: function (value, parameter, fieldInstance) {\n                if (jQuery(parameter).length == 0)\n                    return true;\n\n                utils.bindChangeToOtherElement('different', parameter, fieldInstance, true);\n\n                return jQuery(parameter).val() != value;\n            },\n            messages: {\n                en: 'The value should not be the same as \"%s\".'\n            }\n        });\n\n    // Check if the value is greater than min and smaller than max\n    window.Parsley\n        .addValidator('between', {\n            requirementType: ['integer', 'integer'],\n            validateNumber: function (value, min, max) {\n                return value > min && value < max;\n            },\n            messages: {\n                en: 'The value should be between \"%s\" and \"%s\".'\n            }\n        });\n\n    // Check if the value is equal to the provided value\n    window.Parsley\n        .addValidator('sizeNumber', {\n            requirementType: 'integer',\n            validateNumber: function (value, parameter) {\n                return value == parameter;\n            },\n            messages: {\n                en: 'The value should be \"%s\".'\n            }\n        });\n\n    // Check if the value's length is equal to the provided value\n    window.Parsley\n        .addValidator('sizeString', {\n            requirementType: 'integer',\n            validateString: function (value, parameter) {\n                return value.length == parameter;\n            },\n            messages: {\n                en: 'The value should be \"%s\" characters long.'\n            }\n        });\n\n\n\n    // Check if each value is distinct\n    window.Parsley\n        .addValidator('distinct', {\n            requirementType: 'boolean',\n            validateMultiple: function (values) {\n                var storedValues = [];\n                var isDistinct = true;\n\n                values.forEach(function (value) {\n                    if (storedValues.indexOf(value) > -1) {\n                        isDistinct = false;\n                        return false;\n                    }\n\n                    storedValues.push(value);\n                });\n\n                return isDistinct;\n            },\n            messages: {\n                en: 'Not all values are distinct.'\n            }\n        });\n\n\n\n    // The value should be located in one of the checkbox's checked values\n    window.Parsley\n        .addValidator('inArray', {\n            requirementType: 'string',\n            validateString: function (value, otherFieldName, parsleyInstance) {\n                var thisElement = jQuery(parsleyInstance.$element.get(0));\n\n                var values = [];\n\n                // Check if we're dealing with a text field\n                if (otherFieldName.substring(0, 1) == '#') {\n                    // Bind a change event\n                    utils.bindChangeToOtherElement('inArray', otherFieldName, parsleyInstance, true);\n\n                    // If it's a text field we're assuming that it's a list of comma separated values\n                    return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n                }\n\n                // Bind a change handler to the checkboxes\n                jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n                    utils.bindChangeToOtherElement('inArray', this, parsleyInstance, true);\n                });\n\n                // Get the selected values of a checkbox by it's name\n                jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n                    values.push(jQuery(this).val());\n                });\n\n                // Check if the value is in there\n                return values.indexOf(value) > -1;\n            },\n            messages: {\n                en: 'This value is incorrect.'\n            }\n        });\n\n    // The value is required only if another input's value matched one of the defined ones.\n    // the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    window.Parsley\n        .addValidator('requiredIf', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var values = utils.parseArrayStringParameter(parameters);\n\n                // Get the other input's selector\n                var field = values[0];\n\n                // Get the values it should contain to mark this one as required\n                parameters = values.slice(1);\n\n                // make sure that the other element get's a change event\n                utils.bindChangeToOtherElement('requiredIf', field, fieldInstance);\n\n                // Only required to check if the value is empty\n                if (value.length == 0) {\n                    var fieldValue = jQuery(field).val();\n\n                    return parameters.indexOf(fieldValue) == -1;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if other field does not contain any of the specified values\n    // the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    window.Parsley\n        .addValidator('requiredUnless', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var values = utils.parseArrayStringParameter(parameters);\n\n                // Get the other input's selector\n                var field = values[0];\n\n                // Get the values it should contain to mark this one as required\n                parameters = values.slice(1);\n\n                // make sure that the other element get's a change event\n                utils.bindChangeToOtherElement('requiredUnless', field, fieldInstance);\n\n                // Only required to check if the value is empty\n                if (value.length == 0) {\n\n                    var fieldValue = jQuery(field).val();\n\n                    // It's not required if the input has one of the values\n                    return parameters.indexOf(fieldValue) > -1;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if  any of the inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWith', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AnyPresent = false;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWith', id, fieldInstance);\n\n                        // If the element is in the dom and has a value\n                        if ($elem.length > 0 && $elem.val() != '') {\n                            AnyPresent = true;\n                        }\n                    });\n\n                    return !AnyPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if all other inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithAll', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AllPresent = true;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        // If the value isn't in the dom or is empty\n                        if ($elem.length == 0 || $elem.val() == '') {\n                            AllPresent = false;\n                        }\n                    });\n\n                    return !AllPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if any of the inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithout', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AnyPresent = false;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        if ($elem.length == 0 || $elem.val() == '') {\n                            AnyPresent = true;\n                        }\n                    });\n\n                    return AnyPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if all other inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithoutAll', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AllEmpty = true;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        if ($elem.length == 1  && $elem.val() != '') {\n                            AllEmpty = false;\n                        }\n                    });\n\n                    return AllEmpty;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n    /**\n     * Overwrite core Parsley methods.\n     *\n     * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n     */\n    window.ParsleyExtend = {\n        // Normally this was intended Internal only.\n        // Field is required if have required constraint without `false` value\n        _isRequired: function () {\n\n            var requiredRules = [\n                // This one comes out of the box with parsley\n                'required',\n\n                // These ones were added with this library\n                'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n            ];\n\n            var requiredRulesFound = [];\n\n            // Loop over the list to check if they're defined on the field.\n            requiredRules.forEach(function (rule) {\n                if ('undefined' !== typeof this.constraintsByName[rule]) {\n                    requiredRulesFound.push(rule);\n                }\n            }, this);\n\n            // If there's not one required rule, return false\n            if (requiredRulesFound.length == 0)\n                return false;\n\n            // If parsley's on required rule was found\n            if (requiredRulesFound.indexOf('required') >= 0) {\n                // Check if the flag is set to true\n                return false !== this.constraintsByName.required.requirements;\n            }\n\n            return true;\n        }\n    };\n\n    var main = utils;\n\n    return main;\n\n}));\n","// Check if the value is within a comma-separated list (val1,val2,..)\nwindow.Parsley\n    .addValidator('in', {\n        requirementType: 'string',\n        validateString: function (value, parameter) {\n            var possibles = parameter.split(',');\n\n            return possibles.indexOf(value) > -1;\n        },\n        messages: {\n            en: 'The value should be one of the following: \"%s\".'\n        }\n    });\n\n// Check if the value is not in a comma-separated list (val1,val2,..)\nwindow.Parsley\n    .addValidator('notIn', {\n        requirementType: 'string',\n        validateString: function (value, parameter) {\n            var possibles = parameter.split(',');\n\n            return possibles.indexOf(value) == -1;\n        },\n        messages: {\n            en: 'The value should not be one of the following: \"%s\".'\n        }\n    });","import moment from 'moment';\nimport jQuery from 'jquery';\n\n// Valid date formats\nwindow.Parsley.options.dateFormats = ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD'];\n\n// Check if the value is a date\nwindow.Parsley\n    .addValidator('date', {\n        requirementType: 'boolean',\n        validateString: function (value, state, parsleyInstance) {\n            return moment(value, formatDatePhpToJs.getDateFormatsOption(parsleyInstance), true).isValid();\n        },\n        messages: {\n            en: 'You should provide a valid date.'\n        }\n    });\n\n\n// Check if the value is a date in a specific format\nwindow.Parsley\n    .addValidator('dateFormat', {\n        requirementType: 'string',\n        validateString: function (value, parameter) {\n            return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n        },\n        messages: {\n            en: 'The date you entered is not in the right format (%s).'\n        }\n    });\n\n\n// Check if the value is a date before the specified date\nwindow.Parsley\n    .addValidator('before', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n\n            var beforeDate = moment(parameter, dateFormats, true);\n\n            // If it's not a valid date, error\n            if (beforeDate === false)\n                return false;\n\n            return moment(value, dateFormats) < beforeDate;\n        },\n        messages: {\n            en: 'The date you entered should be before %s.'\n        }\n    });\n\n// Check if the value is a date before the specified date (from another input)\nwindow.Parsley\n    .addValidator('beforeInput', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n            var beforeInput = jQuery(parameter);\n\n            // If we can't find the input, return true\n            if (beforeInput.length == 0)\n                return true;\n\n            var beforeVal = beforeInput.val();\n\n            // If the val is empty, return true\n            if (beforeVal == '')\n                return true;\n\n            var beforeDate = moment(beforeVal, dateFormats, true);\n\n            // If the before date isn't valid, error out\n            if (beforeDate.isValid() === false) {\n                console.warn(parameter + ' input does not contain a valid date');\n                return false;\n            }\n\n            var thisDate = moment(value, dateFormats, true);\n\n            // If the value's date isn't valid, error out\n            if (thisDate.isValid() === false) {\n                console.warn('the input being checked does not contain a valid date');\n                return false;\n            }\n\n            return thisDate < beforeDate;\n        },\n        messages: {\n            en: 'The date you entered should be before %s.'\n        }\n    });\n\n\n// Check if the value is a date before the specified date\nwindow.Parsley\n    .addValidator('after', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n            var afterDate = moment(parameter, dateFormats, true);\n\n            // If it's not a valid date, error\n            if (afterDate === false)\n                return false;\n\n            return moment(value, dateFormats) > afterDate;\n        },\n        messages: {\n            en: 'The date you entered should be after %s.'\n        }\n    });\n\n// Check if the value is a date before the specified date (from another input)\nwindow.Parsley\n    .addValidator('afterInput', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n            var afterInput = jQuery(parameter);\n\n            console.log(this, dateFormats);\n\n            // If we can't find the input, return true\n            if (afterInput.length == 0)\n                return true;\n\n            var afterVal = afterInput.val();\n\n            // If the val is empty, return true\n            if (afterVal == '')\n                return true;\n\n            var afterDate = moment(afterVal, dateFormats, true);\n\n            // If the after date isn't valid, error out\n            if (afterDate.isValid() === false) {\n                console.warn(parameter + ' input does not contain a valid date');\n                return false;\n            }\n\n            var thisDate = moment(value, dateFormats, true);\n\n            // If the value's date isn't valid, error out\n            if (thisDate.isValid() === false) {\n                console.warn('the input being checked does not contain a valid date');\n                return false;\n            }\n\n            return thisDate > afterDate;\n        },\n        messages: {\n            en: 'The date you entered should be after %s.'\n        }\n    });\n\n// convert PHP date format to moment JS date format\nvar formatDatePhpToJs = {\n    mapChars: {\n        d: 'DD',\n        D: 'ddd',\n        j: 'D',\n        l: 'dddd',\n        N: 'E',\n        S: function () {\n            return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n        },\n        w: 'd',\n        z: function () {\n            return this.format('DDD', true) - 1;\n        },\n        W: 'W',\n        F: 'MMMM',\n        m: 'MM',\n        M: 'MMM',\n        n: 'M',\n        t: function () {\n            return this.daysInMonth();\n        },\n        L: function () {\n            return this.isLeapYear() ? 1 : 0;\n        },\n        o: 'GGGG',\n        Y: 'YYYY',\n        y: 'YY',\n        a: 'a',\n        A: 'A',\n        B: function () {\n            var thisUTC = this.clone().utc(),\n            // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n            return Math.floor(swatch * 1000 / 24);\n        },\n        g: 'h',\n        G: 'H',\n        h: 'hh',\n        H: 'HH',\n        i: 'mm',\n        s: 'ss',\n        u: '[u]', // not sure if moment has this\n        e: '[e]', // moment does not have this\n        I: function () {\n            return this.isDST() ? 1 : 0;\n        },\n        O: 'ZZ',\n        P: 'Z',\n        T: '[T]', // deprecated in moment\n        Z: function () {\n            return parseInt(this.format('ZZ', true), 10) * 36;\n        },\n        c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n        r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n        U: 'X'\n    },\n    formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n    convert: function (PHPDateFormat) {\n        return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n            console.log(formatDatePhpToJs.mapChars[phpStr]);\n            return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n        })\n    },\n    getDateFormatsOption: function (parsleyInstance) {\n        if (typeof parsleyInstance.options.dateFormats == 'undefined') {\n            return this.getDateFormatsOption(parsleyInstance.parent);\n        }\n\n        return parsleyInstance.options.dateFormats;\n    }\n}","import jQuery from 'jquery';\n\n/**\n * Helper functions.\n *\n * @type {{parseArrayStringParameter: larapars.parseArrayStringParameter, bindChangeToOtherElement: larapars.bindChangeToOtherElement, getDateFormatsOption: larapars.getDateFormatsOption}}\n */\nexport default {\n    parseArrayStringParameter: function (parameter) {\n        var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n        if (!m)\n            throw 'Requirement is not an array: \"' + parameter + '\"';\n\n        return m[1].replace(/\\'+/g, '').split(',');\n    },\n    /**\n     * This is used by various validation rules that rely on another input for validation.\n     *\n     * This function adds a 'change' event listener which forces the original to be validated again.\n     *\n     * @param rule              Name of the rule this change handler is for\n     * @param element           Which element to bind this to\n     * @param fieldInstance     The ParsleyFieldInstance we can call validate() on\n     * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n     */\n    bindChangeToOtherElement: function (rule, element, fieldInstance, originalNotEmpty) {\n        var $elem = jQuery(element);\n        var elData = $elem.data('larapars-rules');\n\n        // None were added yet, initialise\n        if (elData === undefined) {\n            elData = [rule];\n            $elem.data('larapars-rules', elData);\n        }\n        // Initialised, but not present\n        else if (elData.indexOf(rule) == -1) {\n            elData.push(rule);\n            $elem.data('larapars-rules', elData);\n        }\n        // Already bound\n        else {\n            return;\n        }\n\n        // If not yet bound\n        $elem.on('change', function () {\n            if (originalNotEmpty === true && jQuery(fieldInstance.$element.get(0)).val() != '') {\n                fieldInstance.validate();\n            }\n            else if (originalNotEmpty !== true) {\n                fieldInstance.validate();\n            }\n        });\n    }\n};","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// Check if the value is different from the specified input's value\nwindow.Parsley\n    .addValidator('different', {\n        requirementType: 'string',\n        validateString: function (value, parameter, fieldInstance) {\n            if (jQuery(parameter).length == 0)\n                return true;\n\n            utils.bindChangeToOtherElement('different', parameter, fieldInstance, true);\n\n            return jQuery(parameter).val() != value;\n        },\n        messages: {\n            en: 'The value should not be the same as \"%s\".'\n        }\n    });\n\n// Check if the value is greater than min and smaller than max\nwindow.Parsley\n    .addValidator('between', {\n        requirementType: ['integer', 'integer'],\n        validateNumber: function (value, min, max) {\n            return value > min && value < max;\n        },\n        messages: {\n            en: 'The value should be between \"%s\" and \"%s\".'\n        }\n    });\n\n// Check if the value is equal to the provided value\nwindow.Parsley\n    .addValidator('sizeNumber', {\n        requirementType: 'integer',\n        validateNumber: function (value, parameter) {\n            return value == parameter;\n        },\n        messages: {\n            en: 'The value should be \"%s\".'\n        }\n    });\n\n// Check if the value's length is equal to the provided value\nwindow.Parsley\n    .addValidator('sizeString', {\n        requirementType: 'integer',\n        validateString: function (value, parameter) {\n            return value.length == parameter;\n        },\n        messages: {\n            en: 'The value should be \"%s\" characters long.'\n        }\n    });\n\n\n\n// Check if each value is distinct\nwindow.Parsley\n    .addValidator('distinct', {\n        requirementType: 'boolean',\n        validateMultiple: function (values) {\n            var storedValues = [];\n            var isDistinct = true;\n\n            values.forEach(function (value) {\n                if (storedValues.indexOf(value) > -1) {\n                    isDistinct = false;\n                    return false;\n                }\n\n                storedValues.push(value);\n            });\n\n            return isDistinct;\n        },\n        messages: {\n            en: 'Not all values are distinct.'\n        }\n    });\n\n\n\n// The value should be located in one of the checkbox's checked values\nwindow.Parsley\n    .addValidator('inArray', {\n        requirementType: 'string',\n        validateString: function (value, otherFieldName, parsleyInstance) {\n            var thisElement = jQuery(parsleyInstance.$element.get(0));\n\n            var values = [];\n\n            // Check if we're dealing with a text field\n            if (otherFieldName.substring(0, 1) == '#') {\n                // Bind a change event\n                utils.bindChangeToOtherElement('inArray', otherFieldName, parsleyInstance, true);\n\n                // If it's a text field we're assuming that it's a list of comma separated values\n                return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n            }\n\n            // Bind a change handler to the checkboxes\n            jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n                utils.bindChangeToOtherElement('inArray', this, parsleyInstance, true);\n            });\n\n            // Get the selected values of a checkbox by it's name\n            jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n                values.push(jQuery(this).val());\n            });\n\n            // Check if the value is in there\n            return values.indexOf(value) > -1;\n        },\n        messages: {\n            en: 'This value is incorrect.'\n        }\n    });","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value is required only if another input's value matched one of the defined ones.\n// the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\nwindow.Parsley\n    .addValidator('requiredIf', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var values = utils.parseArrayStringParameter(parameters);\n\n            // Get the other input's selector\n            var field = values[0];\n\n            // Get the values it should contain to mark this one as required\n            parameters = values.slice(1);\n\n            // make sure that the other element get's a change event\n            utils.bindChangeToOtherElement('requiredIf', field, fieldInstance);\n\n            // Only required to check if the value is empty\n            if (value.length == 0) {\n                var fieldValue = jQuery(field).val();\n\n                return parameters.indexOf(fieldValue) == -1;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if other field does not contain any of the specified values\n// the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\nwindow.Parsley\n    .addValidator('requiredUnless', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var values = utils.parseArrayStringParameter(parameters);\n\n            // Get the other input's selector\n            var field = values[0];\n\n            // Get the values it should contain to mark this one as required\n            parameters = values.slice(1);\n\n            // make sure that the other element get's a change event\n            utils.bindChangeToOtherElement('requiredUnless', field, fieldInstance);\n\n            // Only required to check if the value is empty\n            if (value.length == 0) {\n\n                var fieldValue = jQuery(field).val();\n\n                // It's not required if the input has one of the values\n                return parameters.indexOf(fieldValue) > -1;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if  any of the inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWith', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AnyPresent = false;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWith', id, fieldInstance);\n\n                    // If the element is in the dom and has a value\n                    if ($elem.length > 0 && $elem.val() != '') {\n                        AnyPresent = true;\n                    }\n                });\n\n                return !AnyPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if all other inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithAll', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AllPresent = true;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    // If the value isn't in the dom or is empty\n                    if ($elem.length == 0 || $elem.val() == '') {\n                        AllPresent = false;\n                    }\n                });\n\n                return !AllPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if any of the inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithout', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AnyPresent = false;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    if ($elem.length == 0 || $elem.val() == '') {\n                        AnyPresent = true;\n                    }\n                });\n\n                return AnyPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if all other inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithoutAll', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AllEmpty = true;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    if ($elem.length == 1  && $elem.val() != '') {\n                        AllEmpty = false;\n                    }\n                });\n\n                return AllEmpty;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });","import jQuery from 'jquery';\nimport './rules/ins';\nimport './rules/dates';\nimport './rules/comparison';\nimport './rules/requireds.js';\nimport './utils.js';\n\n/**\n * Overwrite core Parsley methods.\n *\n * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n */\nwindow.ParsleyExtend = {\n    // Normally this was intended Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n\n        var requiredRules = [\n            // This one comes out of the box with parsley\n            'required',\n\n            // These ones were added with this library\n            'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n        ];\n\n        var requiredRulesFound = [];\n\n        // Loop over the list to check if they're defined on the field.\n        requiredRules.forEach(function (rule) {\n            if ('undefined' !== typeof this.constraintsByName[rule]) {\n                requiredRulesFound.push(rule);\n            }\n        }, this);\n\n        // If there's not one required rule, return false\n        if (requiredRulesFound.length == 0)\n            return false;\n\n        // If parsley's on required rule was found\n        if (requiredRulesFound.indexOf('required') >= 0) {\n            // Check if the flag is set to true\n            return false !== this.constraintsByName.required.requirements;\n        }\n\n        return true;\n    }\n};\n\nexport default utils;"],"sourceRoot":"/source/"}