{"version":3,"sources":["laravel-parsley.js","src/rules/ins.js","src/rules/dates.js","src/utils.js","src/rules/comparison.js","src/rules/requireds.js","src/rules/files.js","src/main.js"],"names":[],"mappings":"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","file":"laravel-parsley.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery'), require('moment')) :\n    typeof define === 'function' && define.amd ? define(['jquery', 'moment'], factory) :\n    global.laraParsley = factory(global.jQuery, global.moment)\n}(this, function (jQuery, moment) { 'use strict';\n\n    // Check if the value is within a comma-separated list (val1,val2,..)\n    window.Parsley\n        .addValidator('in', {\n            requirementType: 'string',\n            validateString: function (value, parameter) {\n                var possibles = parameter.split(',');\n\n                return possibles.indexOf(value) > -1;\n            },\n            messages: {\n                en: 'The value should be one of the following: \"%s\".'\n            }\n        });\n\n    // Check if the value is not in a comma-separated list (val1,val2,..)\n    window.Parsley\n        .addValidator('notIn', {\n            requirementType: 'string',\n            validateString: function (value, parameter) {\n                var possibles = parameter.split(',');\n\n                return possibles.indexOf(value) == -1;\n            },\n            messages: {\n                en: 'The value should not be one of the following: \"%s\".'\n            }\n        });\n\n    // Valid date formats\n    window.Parsley.options.dateFormats = ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD'];\n\n    // Check if the value is a date\n    window.Parsley\n        .addValidator('date', {\n            requirementType: 'boolean',\n            validateString: function (value, state, parsleyInstance) {\n                return moment(value, formatDatePhpToJs.getDateFormatsOption(parsleyInstance), true).isValid();\n            },\n            messages: {\n                en: 'You should provide a valid date.'\n            }\n        });\n\n\n    // Check if the value is a date in a specific format\n    window.Parsley\n        .addValidator('dateFormat', {\n            requirementType: 'string',\n            validateString: function (value, parameter) {\n                return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n            },\n            messages: {\n                en: 'The date you entered is not in the right format (%s).'\n            }\n        });\n\n\n    // Check if the value is a date before the specified date\n    window.Parsley\n        .addValidator('before', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n\n                var beforeDate = moment(parameter, dateFormats, true);\n\n                // If it's not a valid date, error\n                if (beforeDate === false)\n                    return false;\n\n                return moment(value, dateFormats) < beforeDate;\n            },\n            messages: {\n                en: 'The date you entered should be before %s.'\n            }\n        });\n\n    // Check if the value is a date before the specified date (from another input)\n    window.Parsley\n        .addValidator('beforeInput', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n                var beforeInput = jQuery(parameter);\n\n                // If we can't find the input, return true\n                if (beforeInput.length == 0)\n                    return true;\n\n                var beforeVal = beforeInput.val();\n\n                // If the val is empty, return true\n                if (beforeVal == '')\n                    return true;\n\n                var beforeDate = moment(beforeVal, dateFormats, true);\n\n                // If the before date isn't valid, error out\n                if (beforeDate.isValid() === false) {\n                    console.warn(parameter + ' input does not contain a valid date');\n                    return false;\n                }\n\n                var thisDate = moment(value, dateFormats, true);\n\n                // If the value's date isn't valid, error out\n                if (thisDate.isValid() === false) {\n                    console.warn('the input being checked does not contain a valid date');\n                    return false;\n                }\n\n                return thisDate < beforeDate;\n            },\n            messages: {\n                en: 'The date you entered should be before %s.'\n            }\n        });\n\n\n    // Check if the value is a date before the specified date\n    window.Parsley\n        .addValidator('after', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n                var afterDate = moment(parameter, dateFormats, true);\n\n                // If it's not a valid date, error\n                if (afterDate === false)\n                    return false;\n\n                return moment(value, dateFormats) > afterDate;\n            },\n            messages: {\n                en: 'The date you entered should be after %s.'\n            }\n        });\n\n    // Check if the value is a date before the specified date (from another input)\n    window.Parsley\n        .addValidator('afterInput', {\n            requirementType: 'string',\n            validateString: function (value, parameter, parsleyInstance) {\n                var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n                var afterInput = jQuery(parameter);\n\n                console.log(this, dateFormats);\n\n                // If we can't find the input, return true\n                if (afterInput.length == 0)\n                    return true;\n\n                var afterVal = afterInput.val();\n\n                // If the val is empty, return true\n                if (afterVal == '')\n                    return true;\n\n                var afterDate = moment(afterVal, dateFormats, true);\n\n                // If the after date isn't valid, error out\n                if (afterDate.isValid() === false) {\n                    console.warn(parameter + ' input does not contain a valid date');\n                    return false;\n                }\n\n                var thisDate = moment(value, dateFormats, true);\n\n                // If the value's date isn't valid, error out\n                if (thisDate.isValid() === false) {\n                    console.warn('the input being checked does not contain a valid date');\n                    return false;\n                }\n\n                return thisDate > afterDate;\n            },\n            messages: {\n                en: 'The date you entered should be after %s.'\n            }\n        });\n\n    // convert PHP date format to moment JS date format\n    var formatDatePhpToJs = window.formatDatePhpToJs = {\n        mapChars: {\n            d: 'DD',\n            D: 'ddd',\n            j: 'D',\n            l: 'dddd',\n            N: 'E',\n            S: function () {\n                return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n            },\n            w: 'd',\n            z: function () {\n                return this.format('DDD', true) - 1;\n            },\n            W: 'W',\n            F: 'MMMM',\n            m: 'MM',\n            M: 'MMM',\n            n: 'M',\n            t: function () {\n                return this.daysInMonth();\n            },\n            L: function () {\n                return this.isLeapYear() ? 1 : 0;\n            },\n            o: 'GGGG',\n            Y: 'YYYY',\n            y: 'YY',\n            a: 'a',\n            A: 'A',\n            B: function () {\n                var thisUTC = this.clone().utc(),\n                // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                    swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n                return Math.floor(swatch * 1000 / 24);\n            },\n            g: 'h',\n            G: 'H',\n            h: 'hh',\n            H: 'HH',\n            i: 'mm',\n            s: 'ss',\n            u: '[u]', // not sure if moment has this\n            e: '[e]', // moment does not have this\n            I: function () {\n                return this.isDST() ? 1 : 0;\n            },\n            O: 'ZZ',\n            P: 'Z',\n            T: '[T]', // deprecated in moment\n            Z: function () {\n                return parseInt(this.format('ZZ', true), 10) * 36;\n            },\n            c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n            r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n            U: 'X'\n        },\n        formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n        convert: function (PHPDateFormat) {\n            return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n                console.log(formatDatePhpToJs.mapChars[phpStr]);\n                return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n            })\n        },\n        getDateFormatsOption: function (parsleyInstance) {\n            if (typeof parsleyInstance.options.dateFormats == 'undefined') {\n                return this.getDateFormatsOption(parsleyInstance.parent);\n            }\n\n            return parsleyInstance.options.dateFormats;\n        }\n    }\n\n    /**\n     * Helper functions.\n     *\n     * @type {{parseArrayStringParameter: larapars.parseArrayStringParameter, bindChangeToOtherElement: larapars.bindChangeToOtherElement, getDateFormatsOption: larapars.getDateFormatsOption}}\n     */\n    var utils = {\n        parseArrayStringParameter: function (parameter) {\n            var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n            if (!m)\n                throw 'Requirement is not an array: \"' + parameter + '\"';\n\n            return m[1].replace(/\\'+/g, '').split(',');\n        },\n        /**\n         * This is used by various validation rules that rely on another input for validation.\n         *\n         * This function adds a 'change' event listener which forces the original to be validated again.\n         *\n         * @param rule              Name of the rule this change handler is for\n         * @param element           Which element to bind this to\n         * @param fieldInstance     The ParsleyFieldInstance we can call validate() on\n         * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n         */\n        bindChangeToOtherElement: function (rule, element, fieldInstance, originalNotEmpty) {\n            var $elem = jQuery(element);\n            var elData = $elem.data('larapars-rules');\n\n            // None were added yet, initialise\n            if (elData === undefined) {\n                elData = [rule];\n                $elem.data('larapars-rules', elData);\n            }\n            // Initialised, but not present\n            else if (elData.indexOf(rule) == -1) {\n                elData.push(rule);\n                $elem.data('larapars-rules', elData);\n            }\n            // Already bound\n            else {\n                return;\n            }\n\n            // If not yet bound\n            $elem.on('change', function () {\n                if (originalNotEmpty === true && jQuery(fieldInstance.$element.get(0)).val() != '') {\n                    fieldInstance.validate();\n                }\n                else if (originalNotEmpty !== true) {\n                    fieldInstance.validate();\n                }\n            });\n        }\n    };\n\n    // Check if the value is different from the specified input's value\n    window.Parsley\n        .addValidator('different', {\n            requirementType: 'string',\n            validateString: function (value, parameter, fieldInstance) {\n                if (jQuery(parameter).length == 0)\n                    return true;\n\n                utils.bindChangeToOtherElement('different', parameter, fieldInstance, true);\n\n                return jQuery(parameter).val() != value;\n            },\n            messages: {\n                en: 'The value should not be the same as \"%s\".'\n            }\n        });\n\n    // Check if the value is greater than min and smaller than max\n    window.Parsley\n        .addValidator('between', {\n            requirementType: ['integer', 'integer'],\n            validateNumber: function (value, min, max) {\n                return value > min && value < max;\n            },\n            messages: {\n                en: 'The value should be between \"%s\" and \"%s\".'\n            }\n        });\n\n    // Check if the value is equal to the provided value\n    window.Parsley\n        .addValidator('sizeNumber', {\n            requirementType: 'integer',\n            validateNumber: function (value, parameter) {\n                return value == parameter;\n            },\n            messages: {\n                en: 'The value should be \"%s\".'\n            }\n        });\n\n    // Check if the value's length is equal to the provided value\n    window.Parsley\n        .addValidator('sizeString', {\n            requirementType: 'integer',\n            validateString: function (value, parameter) {\n                return value.length == parameter;\n            },\n            messages: {\n                en: 'The value should be \"%s\" characters long.'\n            }\n        });\n\n\n\n    // Check if each value is distinct\n    window.Parsley\n        .addValidator('distinct', {\n            requirementType: 'boolean',\n            validateMultiple: function (values) {\n                var storedValues = [];\n                var isDistinct = true;\n\n                values.forEach(function (value) {\n                    if (storedValues.indexOf(value) > -1) {\n                        isDistinct = false;\n                        return false;\n                    }\n\n                    storedValues.push(value);\n                });\n\n                return isDistinct;\n            },\n            messages: {\n                en: 'Not all values are distinct.'\n            }\n        });\n\n\n\n    // The value should be located in one of the checkbox's checked values\n    window.Parsley\n        .addValidator('inArray', {\n            requirementType: 'string',\n            validateString: function (value, otherFieldName, parsleyInstance) {\n                var thisElement = jQuery(parsleyInstance.$element.get(0));\n\n                var values = [];\n\n                // Check if we're dealing with a text field\n                if (otherFieldName.substring(0, 1) == '#') {\n                    // Bind a change event\n                    utils.bindChangeToOtherElement('inArray', otherFieldName, parsleyInstance, true);\n\n                    // If it's a text field we're assuming that it's a list of comma separated values\n                    return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n                }\n\n                // Bind a change handler to the checkboxes\n                jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n                    utils.bindChangeToOtherElement('inArray', this, parsleyInstance, true);\n                });\n\n                // Get the selected values of a checkbox by it's name\n                jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n                    values.push(jQuery(this).val());\n                });\n\n                // Check if the value is in there\n                return values.indexOf(value) > -1;\n            },\n            messages: {\n                en: 'This value is incorrect.'\n            }\n        });\n\n    // The value is required only if another input's value matched one of the defined ones.\n    // the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    window.Parsley\n        .addValidator('requiredIf', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var values = utils.parseArrayStringParameter(parameters);\n\n                // Get the other input's selector\n                var field = values[0];\n\n                // Get the values it should contain to mark this one as required\n                parameters = values.slice(1);\n\n                // make sure that the other element get's a change event\n                utils.bindChangeToOtherElement('requiredIf', field, fieldInstance);\n\n                // Only required to check if the value is empty\n                if (value.length == 0) {\n                    var fieldValue = jQuery(field).val();\n\n                    return parameters.indexOf(fieldValue) == -1;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if other field does not contain any of the specified values\n    // the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\n    window.Parsley\n        .addValidator('requiredUnless', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var values = utils.parseArrayStringParameter(parameters);\n\n                // Get the other input's selector\n                var field = values[0];\n\n                // Get the values it should contain to mark this one as required\n                parameters = values.slice(1);\n\n                // make sure that the other element get's a change event\n                utils.bindChangeToOtherElement('requiredUnless', field, fieldInstance);\n\n                // Only required to check if the value is empty\n                if (value.length == 0) {\n\n                    var fieldValue = jQuery(field).val();\n\n                    // It's not required if the input has one of the values\n                    return parameters.indexOf(fieldValue) > -1;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if  any of the inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWith', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AnyPresent = false;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWith', id, fieldInstance);\n\n                        // If the element is in the dom and has a value\n                        if ($elem.length > 0 && $elem.val() != '') {\n                            AnyPresent = true;\n                        }\n                    });\n\n                    return !AnyPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if all other inputs are present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithAll', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AllPresent = true;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        // If the value isn't in the dom or is empty\n                        if ($elem.length == 0 || $elem.val() == '') {\n                            AllPresent = false;\n                        }\n                    });\n\n                    return !AllPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if any of the inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithout', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AnyPresent = false;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        if ($elem.length == 0 || $elem.val() == '') {\n                            AnyPresent = true;\n                        }\n                    });\n\n                    return AnyPresent;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n\n    // The value is required if all other inputs are not present in the dom\n    // the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\n    window.Parsley\n        .addValidator('requiredWithoutAll', {\n            requirementType: 'string',\n            validateString: function (value, parameters, fieldInstance) {\n                // Normalise the parameters\n                var allElements = utils.parseArrayStringParameter(parameters);\n\n                // Only validate if the char count is 0\n                if (value.length == 0) {\n                    var AllEmpty = true;\n\n                    allElements.forEach(function (id) {\n                        var $elem = jQuery(id);\n\n                        // Check for changes on this other input\n                        utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                        if ($elem.length == 1  && $elem.val() != '') {\n                            AllEmpty = false;\n                        }\n                    });\n\n                    return AllEmpty;\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This field is required.'\n            }\n        });\n\n    var filesSizes = {\n        b: 1,\n        kb: 1024,\n        mb: 1024 * 1024,\n        gb: 1024 * 1024 * 1024,\n    };\n\n    // Make sure all files within the inputs are equal to or smaller than the defined size.\n    window.Parsley\n        .addValidator('fileSizeMax', {\n            requirementType: ['integer', 'string'],\n            validateString: function (value, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n                sizeMultiplyer = sizeMultiplyer.toLowerCase();\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // Multiply the max file size\n                maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                console.log(maxSize);\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        console.log(files[i].size);\n                        if (files[i].size > maxSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'Your file(s) are too big.'\n            }\n        });\n\n\n    // Make sure all files within the inputs are equal to or bigger than the defined size.\n    window.Parsley\n        .addValidator('fileSizeMin', {\n            requirementType: ['integer', 'string'],\n            validateString: function (value, minSize, sizeMultiplyer, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // Multiply the min file size\n                minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (files[i].size < minSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'Your file(s) should are too small.'\n            }\n        });\n\n\n    // Make sure all files within the inputs are between the defined sizes.\n    window.Parsley\n        .addValidator('fileSizeBetween', {\n            requirementType: ['integer', 'integer', 'string'],\n            validateString: function (value, minSize, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // Multiply the file sizes\n                minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n                maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (files[i].size <= minSize || files[i].size >= maxSize) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'Your file(s) should be between %s and %s %s.'\n            }\n        });\n\n\n    // Make sure all files within the input are an image\n    window.Parsley\n        .addValidator('image', {\n            validateString: function (value, param, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (!files[i].type.match('image/*')) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This is not an image.'\n            }\n        });\n\n\n    // Make sure all files within the input have one of the defined mimetypes\n    window.Parsley\n        .addValidator('fileMimetype', {\n            requirementType: 'string',\n            validateString: function (value, mimetypes, parsleyFieldInstance) {\n                var allMimes = utils.parseArrayStringParameter(mimetypes);\n\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        if (allMimes.indexOf(files[i].type) == -1) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This file does not have the correct mimetype \"%s\".'\n            }\n        });\n\n\n    // Make sure all files within the input have one of the defined extensions\n    window.Parsley\n        .addValidator('fileExt', {\n            requirementType: 'string',\n            validateString: function (value, extensions, parsleyFieldInstance) {\n                var allExts = utils.parseArrayStringParameter(extensions);\n\n                var files = parsleyFieldInstance.$element[0].files;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    // Loop over the files\n                    for (var i = 0; i < files.length; i++) {\n                        var explodeNames = files[i].name.split('.');\n\n                        if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            },\n            messages: {\n                en: 'This file does not have the correct extensions.'\n            }\n        });\n\n    // Make sure all images within the input have specific dimensions\n    window.Parsley\n        .addValidator('dimensions', {\n            requirementType: {\n                '': 'boolean',\n                min_width: 'number', // Specify the minimum width the image should have\n                max_width: 'number', // Specify the maximum width the image should have\n                min_height: 'number', // Specify the minimum height the image should have\n                max_height: 'number', // Specify the maximum height the image should have\n                width: 'number', // Specify the  width the image should have\n                height: 'number', // Specify the height the image should have\n                ratio: 'string', // Specify the ratio the image should have\n            },\n            validateString: function (value, param, parsleyFieldInstance) {\n                var files = parsleyFieldInstance.$element[0].files;\n\n                var options = parsleyFieldInstance.domOptions.dimensionsOptions;\n\n                // If a file is present in the input\n                if (files.length > 0) {\n                    var defer = jQuery.Deferred();\n                    var _URL = window.URL || window.webkitURL;\n\n                    var image = new Image;\n\n                    // Validate once t he image is loaded\n                    image.onload = function () {\n                        var width = this.width;\n                        var height = this.height;\n\n                        // Check min width, if defined\n                        if (typeof options.min_width != 'undefined') {\n                            if (width < options.min_width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check max width, if defined\n                        if (typeof options.max_width != 'undefined') {\n                            if (width > options.max_width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check min height, if defined\n                        if (typeof options.min_height != 'undefined') {\n                            if (height < options.min_height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check max height, if defined\n                        if (typeof options.max_height != 'undefined') {\n                            if (height > options.max_height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check width, if defined\n                        if (typeof options.width != 'undefined') {\n                            if (width != options.width) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check height, if defined\n                        if (typeof options.height != 'undefined') {\n                            if (height != options.height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        // Check ratio, if defined\n                        if (typeof options.ratio != 'undefined') {\n                            var splitRatio = options.ratio.split(':');\n                            if (splitRatio[0] / splitRatio[1] != width / height) {\n                                defer.reject(image);\n                                return true;\n                            }\n                        }\n\n                        defer.resolve(image);\n                    };\n\n                    // On error, reject the promise\n                    image.onerror = function () {\n                        console.warn('image load error');\n                        defer.reject();\n                    }\n\n                    image.src = _URL.createObjectURL(files[0]);\n\n                    return defer.promise().then(function(image){\n                        // Clean up\n                        image = null;\n\n                        return true;\n                    }, function(image){\n                        // Clean up\n                        image = null;\n\n                        return false;\n                    });\n                }\n\n                return true;\n            }\n        });\n\n    /**\n     * Overwrite core Parsley methods.\n     *\n     * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n     */\n    window.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n        // Normally this was intended Internal only.\n        // Field is required if have required constraint without `false` value\n        _isRequired: function () {\n\n            var requiredRules = [\n                // This one comes out of the box with parsley\n                'required',\n\n                // These ones were added with this library\n                'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n            ];\n\n            var requiredRulesFound = [];\n\n            // Loop over the list to check if they're defined on the field.\n            requiredRules.forEach(function (rule) {\n                if ('undefined' !== typeof this.constraintsByName[rule]) {\n                    requiredRulesFound.push(rule);\n                }\n            }, this);\n\n            // If there's not one required rule, return false\n            if (requiredRulesFound.length == 0)\n                return false;\n\n            // If parsley's on required rule was found\n            if (requiredRulesFound.indexOf('required') >= 0) {\n                // Check if the flag is set to true\n                return false !== this.constraintsByName.required.requirements;\n            }\n\n            return true;\n        }\n    });\n\n    var main = utils;\n\n    return main;\n\n}));\n","// Check if the value is within a comma-separated list (val1,val2,..)\nwindow.Parsley\n    .addValidator('in', {\n        requirementType: 'string',\n        validateString: function (value, parameter) {\n            var possibles = parameter.split(',');\n\n            return possibles.indexOf(value) > -1;\n        },\n        messages: {\n            en: 'The value should be one of the following: \"%s\".'\n        }\n    });\n\n// Check if the value is not in a comma-separated list (val1,val2,..)\nwindow.Parsley\n    .addValidator('notIn', {\n        requirementType: 'string',\n        validateString: function (value, parameter) {\n            var possibles = parameter.split(',');\n\n            return possibles.indexOf(value) == -1;\n        },\n        messages: {\n            en: 'The value should not be one of the following: \"%s\".'\n        }\n    });","import moment from 'moment';\nimport jQuery from 'jquery';\n\n// Valid date formats\nwindow.Parsley.options.dateFormats = ['DD/MM/YY', 'DD/MM/YYYY', 'MM/DD/YY', 'MM/DD/YYYY', 'YY/MM/DD', 'YYYY/MM/DD'];\n\n// Check if the value is a date\nwindow.Parsley\n    .addValidator('date', {\n        requirementType: 'boolean',\n        validateString: function (value, state, parsleyInstance) {\n            return moment(value, formatDatePhpToJs.getDateFormatsOption(parsleyInstance), true).isValid();\n        },\n        messages: {\n            en: 'You should provide a valid date.'\n        }\n    });\n\n\n// Check if the value is a date in a specific format\nwindow.Parsley\n    .addValidator('dateFormat', {\n        requirementType: 'string',\n        validateString: function (value, parameter) {\n            return moment(value, formatDatePhpToJs.convert(parameter), true).isValid();\n        },\n        messages: {\n            en: 'The date you entered is not in the right format (%s).'\n        }\n    });\n\n\n// Check if the value is a date before the specified date\nwindow.Parsley\n    .addValidator('before', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n\n            var beforeDate = moment(parameter, dateFormats, true);\n\n            // If it's not a valid date, error\n            if (beforeDate === false)\n                return false;\n\n            return moment(value, dateFormats) < beforeDate;\n        },\n        messages: {\n            en: 'The date you entered should be before %s.'\n        }\n    });\n\n// Check if the value is a date before the specified date (from another input)\nwindow.Parsley\n    .addValidator('beforeInput', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n            var beforeInput = jQuery(parameter);\n\n            // If we can't find the input, return true\n            if (beforeInput.length == 0)\n                return true;\n\n            var beforeVal = beforeInput.val();\n\n            // If the val is empty, return true\n            if (beforeVal == '')\n                return true;\n\n            var beforeDate = moment(beforeVal, dateFormats, true);\n\n            // If the before date isn't valid, error out\n            if (beforeDate.isValid() === false) {\n                console.warn(parameter + ' input does not contain a valid date');\n                return false;\n            }\n\n            var thisDate = moment(value, dateFormats, true);\n\n            // If the value's date isn't valid, error out\n            if (thisDate.isValid() === false) {\n                console.warn('the input being checked does not contain a valid date');\n                return false;\n            }\n\n            return thisDate < beforeDate;\n        },\n        messages: {\n            en: 'The date you entered should be before %s.'\n        }\n    });\n\n\n// Check if the value is a date before the specified date\nwindow.Parsley\n    .addValidator('after', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n            var afterDate = moment(parameter, dateFormats, true);\n\n            // If it's not a valid date, error\n            if (afterDate === false)\n                return false;\n\n            return moment(value, dateFormats) > afterDate;\n        },\n        messages: {\n            en: 'The date you entered should be after %s.'\n        }\n    });\n\n// Check if the value is a date before the specified date (from another input)\nwindow.Parsley\n    .addValidator('afterInput', {\n        requirementType: 'string',\n        validateString: function (value, parameter, parsleyInstance) {\n            var dateFormats = formatDatePhpToJs.getDateFormatsOption(parsleyInstance);\n            var afterInput = jQuery(parameter);\n\n            console.log(this, dateFormats);\n\n            // If we can't find the input, return true\n            if (afterInput.length == 0)\n                return true;\n\n            var afterVal = afterInput.val();\n\n            // If the val is empty, return true\n            if (afterVal == '')\n                return true;\n\n            var afterDate = moment(afterVal, dateFormats, true);\n\n            // If the after date isn't valid, error out\n            if (afterDate.isValid() === false) {\n                console.warn(parameter + ' input does not contain a valid date');\n                return false;\n            }\n\n            var thisDate = moment(value, dateFormats, true);\n\n            // If the value's date isn't valid, error out\n            if (thisDate.isValid() === false) {\n                console.warn('the input being checked does not contain a valid date');\n                return false;\n            }\n\n            return thisDate > afterDate;\n        },\n        messages: {\n            en: 'The date you entered should be after %s.'\n        }\n    });\n\n// convert PHP date format to moment JS date format\nvar formatDatePhpToJs = window.formatDatePhpToJs = {\n    mapChars: {\n        d: 'DD',\n        D: 'ddd',\n        j: 'D',\n        l: 'dddd',\n        N: 'E',\n        S: function () {\n            return '[' + this.format('Do', true).replace(/\\d*/g, '') + ']';\n        },\n        w: 'd',\n        z: function () {\n            return this.format('DDD', true) - 1;\n        },\n        W: 'W',\n        F: 'MMMM',\n        m: 'MM',\n        M: 'MMM',\n        n: 'M',\n        t: function () {\n            return this.daysInMonth();\n        },\n        L: function () {\n            return this.isLeapYear() ? 1 : 0;\n        },\n        o: 'GGGG',\n        Y: 'YYYY',\n        y: 'YY',\n        a: 'a',\n        A: 'A',\n        B: function () {\n            var thisUTC = this.clone().utc(),\n            // Shamelessly stolen from http://javascript.about.com/library/blswatch.htm\n                swatch = ((thisUTC.hours() + 1) % 24) + (thisUTC.minutes() / 60) + (thisUTC.seconds() / 3600);\n            return Math.floor(swatch * 1000 / 24);\n        },\n        g: 'h',\n        G: 'H',\n        h: 'hh',\n        H: 'HH',\n        i: 'mm',\n        s: 'ss',\n        u: '[u]', // not sure if moment has this\n        e: '[e]', // moment does not have this\n        I: function () {\n            return this.isDST() ? 1 : 0;\n        },\n        O: 'ZZ',\n        P: 'Z',\n        T: '[T]', // deprecated in moment\n        Z: function () {\n            return parseInt(this.format('ZZ', true), 10) * 36;\n        },\n        c: 'YYYY-MM-DD[T]HH:mm:ssZ',\n        r: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n        U: 'X'\n    },\n    formatEx: /[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,\n    convert: function (PHPDateFormat) {\n        return PHPDateFormat.replace(this.formatEx, function (phpStr) {\n            console.log(formatDatePhpToJs.mapChars[phpStr]);\n            return typeof formatDatePhpToJs.mapChars[phpStr] === 'function' ? formatDatePhpToJs.mapChars[phpStr].call(moment()) : formatDatePhpToJs.mapChars[phpStr];\n        })\n    },\n    getDateFormatsOption: function (parsleyInstance) {\n        if (typeof parsleyInstance.options.dateFormats == 'undefined') {\n            return this.getDateFormatsOption(parsleyInstance.parent);\n        }\n\n        return parsleyInstance.options.dateFormats;\n    }\n}","import jQuery from 'jquery';\n\n/**\n * Helper functions.\n *\n * @type {{parseArrayStringParameter: larapars.parseArrayStringParameter, bindChangeToOtherElement: larapars.bindChangeToOtherElement, getDateFormatsOption: larapars.getDateFormatsOption}}\n */\nexport default {\n    parseArrayStringParameter: function (parameter) {\n        var m = parameter.match(/^\\s*\\[(.*)\\]\\s*$/);\n\n        if (!m)\n            throw 'Requirement is not an array: \"' + parameter + '\"';\n\n        return m[1].replace(/\\'+/g, '').split(',');\n    },\n    /**\n     * This is used by various validation rules that rely on another input for validation.\n     *\n     * This function adds a 'change' event listener which forces the original to be validated again.\n     *\n     * @param rule              Name of the rule this change handler is for\n     * @param element           Which element to bind this to\n     * @param fieldInstance     The ParsleyFieldInstance we can call validate() on\n     * @param originalNotEmpty  Should the original element not be empty? (optional, default false)\n     */\n    bindChangeToOtherElement: function (rule, element, fieldInstance, originalNotEmpty) {\n        var $elem = jQuery(element);\n        var elData = $elem.data('larapars-rules');\n\n        // None were added yet, initialise\n        if (elData === undefined) {\n            elData = [rule];\n            $elem.data('larapars-rules', elData);\n        }\n        // Initialised, but not present\n        else if (elData.indexOf(rule) == -1) {\n            elData.push(rule);\n            $elem.data('larapars-rules', elData);\n        }\n        // Already bound\n        else {\n            return;\n        }\n\n        // If not yet bound\n        $elem.on('change', function () {\n            if (originalNotEmpty === true && jQuery(fieldInstance.$element.get(0)).val() != '') {\n                fieldInstance.validate();\n            }\n            else if (originalNotEmpty !== true) {\n                fieldInstance.validate();\n            }\n        });\n    }\n};","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// Check if the value is different from the specified input's value\nwindow.Parsley\n    .addValidator('different', {\n        requirementType: 'string',\n        validateString: function (value, parameter, fieldInstance) {\n            if (jQuery(parameter).length == 0)\n                return true;\n\n            utils.bindChangeToOtherElement('different', parameter, fieldInstance, true);\n\n            return jQuery(parameter).val() != value;\n        },\n        messages: {\n            en: 'The value should not be the same as \"%s\".'\n        }\n    });\n\n// Check if the value is greater than min and smaller than max\nwindow.Parsley\n    .addValidator('between', {\n        requirementType: ['integer', 'integer'],\n        validateNumber: function (value, min, max) {\n            return value > min && value < max;\n        },\n        messages: {\n            en: 'The value should be between \"%s\" and \"%s\".'\n        }\n    });\n\n// Check if the value is equal to the provided value\nwindow.Parsley\n    .addValidator('sizeNumber', {\n        requirementType: 'integer',\n        validateNumber: function (value, parameter) {\n            return value == parameter;\n        },\n        messages: {\n            en: 'The value should be \"%s\".'\n        }\n    });\n\n// Check if the value's length is equal to the provided value\nwindow.Parsley\n    .addValidator('sizeString', {\n        requirementType: 'integer',\n        validateString: function (value, parameter) {\n            return value.length == parameter;\n        },\n        messages: {\n            en: 'The value should be \"%s\" characters long.'\n        }\n    });\n\n\n\n// Check if each value is distinct\nwindow.Parsley\n    .addValidator('distinct', {\n        requirementType: 'boolean',\n        validateMultiple: function (values) {\n            var storedValues = [];\n            var isDistinct = true;\n\n            values.forEach(function (value) {\n                if (storedValues.indexOf(value) > -1) {\n                    isDistinct = false;\n                    return false;\n                }\n\n                storedValues.push(value);\n            });\n\n            return isDistinct;\n        },\n        messages: {\n            en: 'Not all values are distinct.'\n        }\n    });\n\n\n\n// The value should be located in one of the checkbox's checked values\nwindow.Parsley\n    .addValidator('inArray', {\n        requirementType: 'string',\n        validateString: function (value, otherFieldName, parsleyInstance) {\n            var thisElement = jQuery(parsleyInstance.$element.get(0));\n\n            var values = [];\n\n            // Check if we're dealing with a text field\n            if (otherFieldName.substring(0, 1) == '#') {\n                // Bind a change event\n                utils.bindChangeToOtherElement('inArray', otherFieldName, parsleyInstance, true);\n\n                // If it's a text field we're assuming that it's a list of comma separated values\n                return jQuery(otherFieldName).val().split(',').indexOf(value) > -1;\n            }\n\n            // Bind a change handler to the checkboxes\n            jQuery('input:checkbox[name=\"' + otherFieldName + '\"]').each(function () {\n                utils.bindChangeToOtherElement('inArray', this, parsleyInstance, true);\n            });\n\n            // Get the selected values of a checkbox by it's name\n            jQuery('input:checkbox[name=\"' + otherFieldName + '\"]:checked').each(function () {\n                values.push(jQuery(this).val());\n            });\n\n            // Check if the value is in there\n            return values.indexOf(value) > -1;\n        },\n        messages: {\n            en: 'This value is incorrect.'\n        }\n    });","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\n// The value is required only if another input's value matched one of the defined ones.\n// the parameter should be formatted as data-parsley-required-if=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\nwindow.Parsley\n    .addValidator('requiredIf', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var values = utils.parseArrayStringParameter(parameters);\n\n            // Get the other input's selector\n            var field = values[0];\n\n            // Get the values it should contain to mark this one as required\n            parameters = values.slice(1);\n\n            // make sure that the other element get's a change event\n            utils.bindChangeToOtherElement('requiredIf', field, fieldInstance);\n\n            // Only required to check if the value is empty\n            if (value.length == 0) {\n                var fieldValue = jQuery(field).val();\n\n                return parameters.indexOf(fieldValue) == -1;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if other field does not contain any of the specified values\n// the parameter should be formatted as data-parsley-required-unless=\"[\"#elementValueToCheck\", \"value1,value2,..\"]\"\nwindow.Parsley\n    .addValidator('requiredUnless', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var values = utils.parseArrayStringParameter(parameters);\n\n            // Get the other input's selector\n            var field = values[0];\n\n            // Get the values it should contain to mark this one as required\n            parameters = values.slice(1);\n\n            // make sure that the other element get's a change event\n            utils.bindChangeToOtherElement('requiredUnless', field, fieldInstance);\n\n            // Only required to check if the value is empty\n            if (value.length == 0) {\n\n                var fieldValue = jQuery(field).val();\n\n                // It's not required if the input has one of the values\n                return parameters.indexOf(fieldValue) > -1;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if  any of the inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWith', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AnyPresent = false;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWith', id, fieldInstance);\n\n                    // If the element is in the dom and has a value\n                    if ($elem.length > 0 && $elem.val() != '') {\n                        AnyPresent = true;\n                    }\n                });\n\n                return !AnyPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if all other inputs are present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithAll', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AllPresent = true;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    // If the value isn't in the dom or is empty\n                    if ($elem.length == 0 || $elem.val() == '') {\n                        AllPresent = false;\n                    }\n                });\n\n                return !AllPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if any of the inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithout', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AnyPresent = false;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    if ($elem.length == 0 || $elem.val() == '') {\n                        AnyPresent = true;\n                    }\n                });\n\n                return AnyPresent;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });\n\n\n// The value is required if all other inputs are not present in the dom\n// the parameter should be formatted as data-parsley-required-with-all=\"#elementValueToCheck,#elementValueToCheck,..\"\nwindow.Parsley\n    .addValidator('requiredWithoutAll', {\n        requirementType: 'string',\n        validateString: function (value, parameters, fieldInstance) {\n            // Normalise the parameters\n            var allElements = utils.parseArrayStringParameter(parameters);\n\n            // Only validate if the char count is 0\n            if (value.length == 0) {\n                var AllEmpty = true;\n\n                allElements.forEach(function (id) {\n                    var $elem = jQuery(id);\n\n                    // Check for changes on this other input\n                    utils.bindChangeToOtherElement('requiredWithAll', id, fieldInstance);\n\n                    if ($elem.length == 1  && $elem.val() != '') {\n                        AllEmpty = false;\n                    }\n                });\n\n                return AllEmpty;\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This field is required.'\n        }\n    });","import jQuery from 'jquery';\nimport utils from '../utils.js';\n\nvar filesSizes = {\n    b: 1,\n    kb: 1024,\n    mb: 1024 * 1024,\n    gb: 1024 * 1024 * 1024,\n};\n\n// Make sure all files within the inputs are equal to or smaller than the defined size.\nwindow.Parsley\n    .addValidator('fileSizeMax', {\n        requirementType: ['integer', 'string'],\n        validateString: function (value, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n            sizeMultiplyer = sizeMultiplyer.toLowerCase();\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // Multiply the max file size\n            maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            console.log(maxSize);\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    console.log(files[i].size);\n                    if (files[i].size > maxSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'Your file(s) are too big.'\n        }\n    });\n\n\n// Make sure all files within the inputs are equal to or bigger than the defined size.\nwindow.Parsley\n    .addValidator('fileSizeMin', {\n        requirementType: ['integer', 'string'],\n        validateString: function (value, minSize, sizeMultiplyer, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // Multiply the min file size\n            minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size < minSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'Your file(s) should are too small.'\n        }\n    });\n\n\n// Make sure all files within the inputs are between the defined sizes.\nwindow.Parsley\n    .addValidator('fileSizeBetween', {\n        requirementType: ['integer', 'integer', 'string'],\n        validateString: function (value, minSize, maxSize, sizeMultiplyer, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // Multiply the file sizes\n            minSize = minSize * filesSizes[sizeMultiplyer.toLowerCase()];\n            maxSize = maxSize * filesSizes[sizeMultiplyer.toLowerCase()];\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (files[i].size <= minSize || files[i].size >= maxSize) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'Your file(s) should be between %s and %s %s.'\n        }\n    });\n\n\n// Make sure all files within the input are an image\nwindow.Parsley\n    .addValidator('image', {\n        validateString: function (value, param, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (!files[i].type.match('image/*')) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This is not an image.'\n        }\n    });\n\n\n// Make sure all files within the input have one of the defined mimetypes\nwindow.Parsley\n    .addValidator('fileMimetype', {\n        requirementType: 'string',\n        validateString: function (value, mimetypes, parsleyFieldInstance) {\n            var allMimes = utils.parseArrayStringParameter(mimetypes);\n\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    if (allMimes.indexOf(files[i].type) == -1) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This file does not have the correct mimetype \"%s\".'\n        }\n    });\n\n\n// Make sure all files within the input have one of the defined extensions\nwindow.Parsley\n    .addValidator('fileExt', {\n        requirementType: 'string',\n        validateString: function (value, extensions, parsleyFieldInstance) {\n            var allExts = utils.parseArrayStringParameter(extensions);\n\n            var files = parsleyFieldInstance.$element[0].files;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                // Loop over the files\n                for (var i = 0; i < files.length; i++) {\n                    var explodeNames = files[i].name.split('.');\n\n                    if (allExts.indexOf(explodeNames[explodeNames.length - 1]) == -1) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n        messages: {\n            en: 'This file does not have the correct extensions.'\n        }\n    });\n\n// Make sure all images within the input have specific dimensions\nwindow.Parsley\n    .addValidator('dimensions', {\n        requirementType: {\n            '': 'boolean',\n            min_width: 'number', // Specify the minimum width the image should have\n            max_width: 'number', // Specify the maximum width the image should have\n            min_height: 'number', // Specify the minimum height the image should have\n            max_height: 'number', // Specify the maximum height the image should have\n            width: 'number', // Specify the  width the image should have\n            height: 'number', // Specify the height the image should have\n            ratio: 'string', // Specify the ratio the image should have\n        },\n        validateString: function (value, param, parsleyFieldInstance) {\n            var files = parsleyFieldInstance.$element[0].files;\n\n            var options = parsleyFieldInstance.domOptions.dimensionsOptions;\n\n            // If a file is present in the input\n            if (files.length > 0) {\n                var defer = jQuery.Deferred();\n                var _URL = window.URL || window.webkitURL;\n\n                var image = new Image;\n\n                // Validate once t he image is loaded\n                image.onload = function () {\n                    var width = this.width;\n                    var height = this.height;\n\n                    // Check min width, if defined\n                    if (typeof options.min_width != 'undefined') {\n                        if (width < options.min_width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check max width, if defined\n                    if (typeof options.max_width != 'undefined') {\n                        if (width > options.max_width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check min height, if defined\n                    if (typeof options.min_height != 'undefined') {\n                        if (height < options.min_height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check max height, if defined\n                    if (typeof options.max_height != 'undefined') {\n                        if (height > options.max_height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check width, if defined\n                    if (typeof options.width != 'undefined') {\n                        if (width != options.width) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check height, if defined\n                    if (typeof options.height != 'undefined') {\n                        if (height != options.height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    // Check ratio, if defined\n                    if (typeof options.ratio != 'undefined') {\n                        var splitRatio = options.ratio.split(':');\n                        if (splitRatio[0] / splitRatio[1] != width / height) {\n                            defer.reject(image);\n                            return true;\n                        }\n                    }\n\n                    defer.resolve(image);\n                };\n\n                // On error, reject the promise\n                image.onerror = function () {\n                    console.warn('image load error');\n                    defer.reject();\n                }\n\n                image.src = _URL.createObjectURL(files[0]);\n\n                return defer.promise().then(function(image){\n                    // Clean up\n                    image = null;\n\n                    return true;\n                }, function(image){\n                    // Clean up\n                    image = null;\n\n                    return false;\n                });\n            }\n\n            return true;\n        }\n    });","import jQuery from 'jquery';\nimport './rules/ins';\nimport './rules/dates';\nimport './rules/comparison';\nimport './rules/requireds.js';\nimport './rules/files.js';\nimport './utils.js';\n\n/**\n * Overwrite core Parsley methods.\n *\n * @type {{_isRequired: Window.ParsleyExtend._isRequired}}\n */\nwindow.ParsleyExtend = jQuery.extend({}, window.ParsleyExtend, {\n    // Normally this was intended Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n\n        var requiredRules = [\n            // This one comes out of the box with parsley\n            'required',\n\n            // These ones were added with this library\n            'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n        ];\n\n        var requiredRulesFound = [];\n\n        // Loop over the list to check if they're defined on the field.\n        requiredRules.forEach(function (rule) {\n            if ('undefined' !== typeof this.constraintsByName[rule]) {\n                requiredRulesFound.push(rule);\n            }\n        }, this);\n\n        // If there's not one required rule, return false\n        if (requiredRulesFound.length == 0)\n            return false;\n\n        // If parsley's on required rule was found\n        if (requiredRulesFound.indexOf('required') >= 0) {\n            // Check if the flag is set to true\n            return false !== this.constraintsByName.required.requirements;\n        }\n\n        return true;\n    }\n});\n\nexport default utils;"],"sourceRoot":"/source/"}